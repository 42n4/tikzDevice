\documentclass{article}

% \VignetteIndexEntry{The tikzDevice Package}
% \VignetteDepends{tikzDevice}
% \usepackage{Sweave}

\usepackage[T1]{fontenc}
\usepackage{atbegshi}

\usepackage{tikz}
\usetikzlibrary{calc,positioning,shapes}
\usetikzlibrary{decorations.shapes}

\usepackage[parfill]{parskip}
\usepackage{fancyvrb}
\usepackage[letterpaper,margin=1in]{geometry}
\usepackage[colorlinks]{hyperref}

\usepackage{graphicx}
\usepackage{float}

\newcommand{\lang}{\textsf}
\newcommand{\code}{\texttt}
\newcommand{\pkg}{\textbf}
\newcommand{\TikZ}{Ti\textit{k}Z}

\usepackage{Sweave}

<<setup,echo=F,results=hide>>=

if( !file.exists( 'figs' ) ) dir.create( 'figs' )
require(tikzDevice)
if( !file.exists('Sweave.sty') ){
	file.copy(file.path(R.home(),'share','texmf','Sweave'), 'Sweave.sty')
}
	
@

\title{The \pkg{tikzDevice} Package}
\author{Charlie Sharpsteen and Cameron Bracken}



\begin{document}
	
	\SweaveOpts{echo=F,prefix.string=figs/fig}

\thispagestyle{empty}

% A more complex title page

% HAH! God bless the pgf manual- I've been trying to solve this for
% ever- \vfill has no effect unless you bracket your contents in empty
% \vboxes.
\vbox{}
\vspace{0.5\textheight}
\begin{tikzpicture}[remember picture,overlay]

	\node[anchor=west,scale=2, inner sep=0pt, outer sep=0pt] (title) at (-1cm,0) 
		{\LARGE\bfseries{\color{red}\TikZ}\thinspace\Huge Device};
	
	\draw[line width=5pt] ([yshift=-5pt]title.base west) -- ([yshift=-5pt]title.base east);	


	\coordinate (titleOut) at ($(title.north east) + (24pt,0pt)$);
	\coordinate (titleIn) at ($(title.base west) - (6pt,24pt)$);
		
	\node[color=black!80,below=24pt of title.base east,anchor=east] (sub)
		{\bfseries\itshape\Large R Graphics for \LaTeX};

\end{tikzpicture}
\vfill	
\vbox{}


\begin{tikzpicture}[remember picture,overlay,>=stealth]

	\node (R) at ($(current page.south west) + (18cm,2cm)$)
		{\scalebox{0.85}{\includegraphics{img/Rlogo}}};

	\tikzset{
		bigger/.style={decoration={shape start size=.125cm, shape end size=.5cm}},
		decoration={shape backgrounds,
			shape sep={.25cm, between borders},shape scaled,shape=circle}
	}
			
	\fill[decorate,bigger, blue!25] (R) to[out=190,in=240] (titleIn);	
	
\end{tikzpicture}

\begin{tikzpicture}[overlay,remember picture]

	% Low-level PGF voodoo
	% Something is seriously borked with current page.north east,
	% it's not where you would expect it to be :P
	\newdimen\overlayXoff
	\newdimen\overlayYoff
	\pgfextracty{\overlayXoff}{\pgfpointanchor{current page}{north east}}
	\pgfextracty{\overlayYoff}{\pgfpointanchor{current page}{north east}}
	
	\pgfmathparse{\overlayYoff - 3.75in}
	\overlayYoff = \pgfmathresult pt
	
	\pgfmathparse{\overlayXoff - 6.5in}
	\overlayXoff = \pgfmathresult pt
	
	
	\begin{scope}[x=1pt,y=1pt,yshift=\overlayYoff,xshift=\overlayXoff]

<<tikzTest,results=hide>>=

	tikz('figs/titlePlot.tex',bareBones=T,width=4,height=4)

	x <- seq( -1.95, 1.95, length=30 )
	y <- seq( -1.95, 1.95, length=35 )
	z <- outer( x, y, function(a,b){ a*b^2 } )
	nrz <- nrow(z)
	ncz <- ncol(z)
	jet.colors <- colorRampPalette( c("blue", "green") )
	nbcol <- 100
	color <- jet.colors(nbcol)
	zfacet <- z[-1,-1] + z[-1,-ncz] + z[-nrz, -1] + z[-nrz, -ncz]
	facetcol <- cut(zfacet, nbcol)
	persp(x, y, z, col=color[facetcol], phi=30, theta=-30,axes=F )

	dev.off()
@

		\input{figs/titlePlot.tex}
		
		\coordinate (plotIn) at (2in,0.5in);


	\end{scope}

	\tikzset{
		bigger/.style={decoration={shape start size=.125cm, shape end size=.5cm}},
		decoration={shape backgrounds,
			shape sep={.25cm, between borders},shape scaled,shape=dart}
	}

	\fill[decorate,thick,bigger,color=black!25]
		(titleOut) to[out=20,in=260] (plotIn);

\end{tikzpicture}

\newpage

\maketitle
\begin{center}
	\url{http://r-forge.r-project.org/projects/tikzdevice}
\end{center}
\tableofcontents

\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Documentation starts here.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

The \pkg{tikzDevice} package allows for R graphics output in a native \LaTeX\ format. That is, the output of the \code{tikz()} function is plain-text files that can be interpreted using \TikZ, a package for \LaTeX. These files can be directly included in \LaTeX\ documents by way of the \verb'\input{}' statement. Allowing \LaTeX\ to handle both typesetting and figure composition bestows the resulting document with a clean, unified look as there are no discontinuities in the size and selection of fonts used in the output.

This document is divided into three parts. The first part describes the functions that the package makes available to the \lang{R} user and provides examples of their capabilities. Besides the \lang{R} environment, use of the \TikZ\ device device requires the user to have a working \LaTeX\ compiler along with an installed version of the \TikZ\ package. The second part of this documentation offers suggestions on how to get these tools working properly.

The third part of the documentation is intended for those who are curious as to the details of how this package has been implemented. It attempts to explain how the \TikZ\ package does the things that it does and why it chooses to do them that way. The authors have attempted to write this part of the documentation in a way that is accessible to users as well as developers. This has been done in the hope that this project may serve as a case study in creating an R graphics device. This part of the documentation may also help those considering undertaking the transition from casual package-building to full-on hacking of the \lang{R} internals.


\part{Usage and Examples}
\label{part:one}

\section{Loading the Package}

The functions in the \pkg{tikzDevice} package are made accessible in the \lang{R} environment by using either the \code{library()} or \code{require()} functions like so:

\begin{Verbatim}[frame=single]
require(tikzDevice)
\end{Verbatim}

Upon loading, the package will search for a usable \LaTeX\ compiler. Access to \LaTeX\ is essential for the device to produce correct output as the compiler is queried for font metrics several times during device output. For more information on why communication between the device and \LaTeX\ is necessary, see \autoref{part:three}. If the search for a compiler is successful the package startup message should look similar to the following:

\begin{Verbatim}[frame=single]
filehash: Simple key-value database (2.0-1 2008-12-19)
tikzDevice: A Device for R Graphics Output in PGF/TikZ Format (v0.3.5)
Checking for a LaTeX compiler...

pdfTeX 3.1415926-1.40.9-2.2 (Web2C 7.5.7)
kpathsea version 3.5.7
...

A working LaTeX compiler was found in:
	The R environment variable R_LATEXCMD

Global option tikzLatex set to:
	/usr/texbin/latex
\end{Verbatim}

If a working \LaTeX\ compiler cannot be found, the \pkg{tikzDevice} package will fail to load and a warning message will be displayed:

\begin{Verbatim}[frame=single]
An appropriate LaTeX compiler could not be found.
Access to LaTeX is currently required in order for the
TikZ device to produce output.

The following places were tested for a valid LaTeX compiler:

	A pre-existing value of the global option tikzLatex
	The R environment variable R_LATEXCMD
	The R environment variable R_PDFLATEXCMD
	The global option latexcmd
	The PATH using the command latex
	The PATH using the command pdflatex
...

Error : .onLoad failed in 'loadNamespace' for 'tikzDevice'
Error: package/namespace load failed for 'tikzDevice'
\end{Verbatim}

In this case, \pkg{tikzDevice} has done it's very best to locate a working compiler and came up empty. For information on how to deal with this situation, consult \autoref{part:two} of this documentation.


\section{The \code{tikz()} Function}

\subsection{Description}
The \code{tikz()} function provides most of the functionality of the \pkg{tikzDevice} package. This function is responsible for creating new \lang{R} graphics devices that translate the output of graphics functions to the \TikZ\ format. The device supports many levels of output that range from stand-alone \LaTeX\ documents that may be compiled directly to code chunks that must be incorporated into existing \LaTeX\ documents using the \verb`\include{}` function.

\subsection{Usage}

The \code{tikz()} function opens a new graphics device and may be called with the following arguments:

\begin{Verbatim}[frame=single]
tikz(file = "Rplots.tex", width = 7, height = 7, 
	bg="white", fg="black", standAlone = FALSE, bareBones = FALSE )
\end{Verbatim}

\begin{description}
\item[\code{file}]{ A character string indicating the desired path to the output file. It is recommended, but not required, that the filename end in \code{.tex}.}
\item[\code{width}]{ The width of the output figure, in {\bfseries inches}. }
\item[\code{height}]{ The hegiht of the output figure, in {\bfseries inches}. }
\item[\code{bg}]{ The starting background color for the plot. }
\item[\code{fg}]{ The starting foreground color for the plot. }
\item[\code{standAlone}]{ A logical value indicating whether the resulting file should be suitable for direct processing by \LaTeX .}
\item[\code{bareBones}]{ A logical value indicating whether the resulting \TikZ code produced without being placed within a \LaTeX\ \code{tikzpicture} envirement.}
\end{description}

The first five options should be familiar to anyone who has used the default graphics devices shipped with \lang{R}. The options \code{file}, \code{width}, \code{height}, \code{bg} and \code{fg} represent the standard graphics parameters currently implemented by \pkg{tikzDevice}. The last two options, \code{standAlone} and \code{bareBones}, are specific to the \code{tikz()} graphics device and affect the structure the output file. Using these options \code{tikz()} supports three modes of output: 

\begin{itemize}

	\item{Graphics production as complete \LaTeX\ files suitable for compilation.}
	
	\item{Graphics production as complete figures suitable for inclusion in \LaTeX\ files.}
	
	\item{Graphics production as raw figure code suitable for inclusion in an enclosing \code{tikzpicture} environment in a \LaTeX\ file.}

\end{itemize}

The next section provides examples of how to use each type of output.

\subsection{Examples}

\subsubsection{Basic Usage}

The most common use of the \code{tikz()} function is to produce a plot that will be included in another \LaTeX\ document, such as a report. Running the following example in lang{R} will produce a very simple graphic using the \code{plot()} function.

\begin{Verbatim}[frame=single]
require(tikzDevice)
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
\end{Verbatim}

<<simpleEx,results=hide>>=

tikz('figs/simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()

@


A simple \LaTeX\ document is then required to display the output. This document must include the \TikZ\ as one of the packages that it loads. The \TikZ\ package provides several optional libraries that provide additional functionality, however none of these libraries are currently required to use the output of \code{tikz()}. Inside the \LaTeX\ document, the contents of the file \lang{simpleEx.tex} are imported using the \verb`\include{}` command.

\begin{figure}[H]
	\centering

	\begin{minipage}{0.45\textwidth}

\begin{Verbatim}[frame=single]
\documentclass{article}

% All LaTeX documents including tikz()
% output must include this package!
\usepackage{tikz}

\begin{document}
	\begin{figure}[!h]
        \centering
        
        % The output from tikz() is 
        % imported here.
        \input{simpleEx.tex}
        
        \caption{Simple Example}
    \end{figure}
\end{document}
\end{Verbatim}

	\end{minipage}
	\hfill
	\begin{minipage}{0.45\textwidth}
		\input{figs/simpleEx.tex}
	\end{minipage}
	\caption{Example of basic \code{tikz()} usage.}
\end{figure}

One of the most exciting aspects of the \code{tikz()} function is that it allows the inclusion of arbitrary \LaTeX\ code in plotting commands. An important issue to note is that many \LaTeX\ commands pare prefixed by the backaslash, \textbackslash, character. This character has a special meaning as an escape charcter in many computing applications, including \lang{R}. Therefore, it is necessary to place two backslashes, \textbackslash\textbackslash, in the input to \lang{R} commands in order to cause one to appear in the output.  The next example demonstrates how to use \LaTeX\ commands in plot annotation.

\begin{figure}[H]
	\centering

	\begin{minipage}{0.45\textwidth}

\begin{Verbatim}[frame=single]
require(tikzDevice)
tikz('latexEx.tex',width=3.5,height=3.5)

x <- rnorm(5)
y <- x + rnorm(5,sd=0.25)

model <- lm(y~x)
coef <- coefficients( model )
coef <- signif(coef,4)
rsq <- summary( model )$r.squared
rsq <- signif(rsq,4)

plot(x,y,main='Hello \\LaTeX!')
abline(model,col='red')

mtext( paste("Linear model: $y=", 
	coef[1],"x + ",coef[2],
	"\\quad R^{2}=",rsq,"$" ),
	line=0.5)

dev.off()
\end{Verbatim}

<<latexEx,results=hide>>=

tikz('figs/latexEx.tex',width=3.5,height=3.5)

x <- rnorm(5)
y <- x + rnorm(5,sd=0.25)

model <- lm(y~x)
coef <- coefficients( model )
coef <- signif(coef,4)
rsq <- summary( model )$r.squared
rsq <- signif(rsq,4)

plot(x,y,main='Hello \\LaTeX!')
abline(model,col='red')

mtext( paste("Linear model: $y=", 
	coef[1],"x + ",coef[2],
	"\\quad R^{2}=",rsq,"$" ),
	line=0.5)

dev.off()

@

	\end{minipage}
	\hfill
	\begin{minipage}{0.45\textwidth}
		\input{figs/latexEx.tex}
	\end{minipage}
	\caption{A more complicated example of \code{tikz()} usage.}
\end{figure}


\section{R Options that Affect \pkg{tikzDevice}}

\section{The \code{getLatexCharMetrics()} and \code{getLatexStrWidth()} Functions}

\subsection{Description}

\subsection{Usage}

\subsection{Examples}


\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\part{Installation Guide}
\label{part:two}

\section{Installing \LaTeX}


\section{Installing \TikZ}


\section{Instaling \pkg{tikzDevice}}

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\part{Package Internals}
\label{part:three}

\section{Background}
About \TikZ{}, the Pic\TeX{} device and the story of two fortran programmers with a dream.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{System Requirements}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Character Metrics and String Width}

\subsection{Dictionaries}
\subsection{What the Heck are Acent, Decent and Width}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{On the Importance of Font and Style Consistancy in Reports}

\section{The \pkg{pgfSweave} Package and Automatic Report Generation}
	
\end{document}
