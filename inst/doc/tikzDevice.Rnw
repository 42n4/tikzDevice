\documentclass{article}

% \VignetteIndexEntry{The tikzDevice Package}
% \VignetteDepends{tikzDevice}
% \usepackage{Sweave}

\usepackage[T1]{fontenc}
\usepackage{atbegshi}
\usepackage[colorlinks]{hyperref}


% Sexyness
\usepackage{tikz}
\usetikzlibrary{calc,positioning}
\usetikzlibrary{shapes.multipart,shapes.geometric}
\usetikzlibrary{decorations.shapes,decorations.text}

% Page layout
\usepackage[parfill]{parskip}
\usepackage[letterpaper,margin=1in]{geometry}


% Graphics control.
\usepackage{graphicx}
\usepackage{float}

% Source code markup
\usepackage{verbatim}
\usepackage{listings}

% Macros created for this document
\input{tikzDeviceMacros}

% Make sure you input tikzDeviceMacros first- or
% LaTeX will smite you!
\usepackage{Sweave}


<<setup,echo=F,results=hide>>=

	if( !file.exists( 'figs' ) ) dir.create( 'figs' )
	require(tikzDevice)
	
	# We need some extra options for controlling
	# Sweave output. Therefore we're going to bust
	# out and overwrite some core code with more
	# flexible alternatives.
	
	# *** Begin Mother of All R Hacks ****
	
	# We load a new Sweave function that contains a
	# more flexible set of output routines.
	source('patchSweave.R')
	
	# First, we find out where Sweave lives.
	env <- as.environment('package:utils')
	
	# And we break into it's house.
	unlockBinding('makeRweaveLatexCodeRunner',env)
	unlockBinding('RweaveLatexOptions',env)
	
	# And rearrange it's furniture....
	assignInNamespace('makeRweaveLatexCodeRunner',patchedCodeRunner,ns='utils')
	assignInNamespace('RweaveLatexOptions',patchedOptionsChecker,ns='utils')
	
	# ...and lock the door on the way out.
	lockBinding('makeRweaveLatexCodeRunner',env)
	lockBinding('RweaveLatexOptions',env)
	
	#  But we take something with us when we leave...
	newCodeRunner <- utils:::makeRweaveLatexCodeRunner()
	
	# ...to stalk it down on the street...
	env <- grep('driver', lapply(sys.frames(),
		function(frame){ ls(envir=frame) }
	))
	env <- sys.frames()[[env]]
	
	# ...and give it a facelift.
	evalq( driver$runcode <- newCodeRunner, envir=env)
	evalq( driver$checkopts <- patchedOptionsChecker, envir=env)
	
	# *** End Mother of All R Hacks ***
	
	# Now we have some extra code chunk options to play
	# with:
	#
	#   wrapoutput: a vector of two character strings that will be used
	#                       to surround R output chunks. Were formally hardwired
	#                       to '\n\begin{Soutput}\n' and '\n\end{Soutput}\n'.
	#
	#   wrapinput:  Same idea as wrapoutput- both of these options must be
	#                      set using options() as they are difficult to pass directly to
	#                      Sweave
	
	options( wrapoutput = c('\nswe@veSt@rtOutput','swe@veEndOutput\n') )
	
@

\title{The \pkg{tikzDevice} Package\\
	{\large\url{http://r-forge.r-project.org/projects/tikzdevice}}
}
\author{Charlie Sharpsteen and Cameron Bracken}
\date{Version \tikzDeviceVersion\qquad\today}


\begin{document}
	
\SweaveOpts{echo=F,prefix.string=figs/fig}


%----------------------------  Cover Page -----------------------------------------------------------

\thispagestyle{empty}

% A more complex title page

% HAH! God bless the pgf manual- I've been trying to solve this for
% ever- \vfill has no effect unless you bracket your contents in empty
% \vboxes.
\vbox{}
\vspace{0.5\textheight}
\begin{tikzpicture}[remember picture,overlay]

	\node[anchor=west,scale=2, inner sep=0pt, outer sep=0pt] (title) at (-1cm,0) 
		{\LARGE\bfseries{\color{red}\TikZ}\thinspace\Huge Device};
	
	\draw[line width=5pt] ([yshift=-5pt]title.base west) -- ([yshift=-5pt]title.base east);	


	\coordinate (titleOut) at ($(title.north east) + (24pt,0pt)$);
	\coordinate (titleIn) at ($(title.base west) - (6pt,24pt)$);
		
	\node[color=black!80,below=24pt of title.base east,anchor=east] (sub)
		{\bfseries\itshape\Large \LaTeX Graphics for R};

\end{tikzpicture}
\vfill	
\vbox{}


\begin{tikzpicture}[remember picture,overlay,>=stealth]

	\node (R) at ($(current page.south west) + (18cm,2cm)$)
		{\scalebox{0.85}{\includegraphics[width=0.8\textwidth]{img/Rlogo}}};

	\tikzset{
		bigger/.style={decoration={shape start size=.125cm, shape end size=.5cm}},
		decoration={shape backgrounds,
			shape sep={.25cm, between borders},shape scaled,shape=circle}
	}
			
	\fill[decorate,bigger, blue!25] (R) to[out=190,in=240] (titleIn);	
	
\end{tikzpicture}

\begin{tikzpicture}[overlay,remember picture]

	% Low-level PGF voodoo
	% Something is seriously borked with current page.north east,
	% it's not where you would expect it to be :P
	\newdimen\overlayXoff
	\newdimen\overlayYoff
	\pgfextracty{\overlayXoff}{\pgfpointanchor{current page}{north east}}
	\pgfextracty{\overlayYoff}{\pgfpointanchor{current page}{north east}}
	
	\pgfmathparse{\overlayYoff - 3.75in}
	\overlayYoff = \pgfmathresult pt
	
	\pgfmathparse{\overlayXoff - 6.5in}
	\overlayXoff = \pgfmathresult pt
	
	
	\begin{scope}[x=1pt,y=1pt,yshift=\overlayYoff,xshift=\overlayXoff]

<<tikzTitlePlot,results=hide>>=

	tikz('figs/titlePlot.tex',bareBones=T,width=4,height=4)

	x <- seq( -1.95, 1.95, length=30 )
	y <- seq( -1.95, 1.95, length=35 )
	z <- outer( x, y, function(a,b){ a*b^2 } )
	nrz <- nrow(z)
	ncz <- ncol(z)
	jet.colors <- colorRampPalette( c("blue", "green") )
	nbcol <- 100
	color <- jet.colors(nbcol)
	zfacet <- z[-1,-1] + z[-1,-ncz] + z[-nrz, -1] + z[-nrz, -ncz]
	facetcol <- cut(zfacet, nbcol)
	persp(x, y, z, col=color[facetcol], phi=30, theta=-30,axes=F )

	dev.off()
@

		\input{figs/titlePlot.tex}
		
		\coordinate (plotIn) at (2in,0.5in);


	\end{scope}

	\tikzset{
		bigger/.style={decoration={shape start size=.125cm, shape end size=.5cm}},
		decoration={shape backgrounds,
			shape sep={.25cm, between borders},shape scaled,shape=dart}
	}

	\fill[decorate,thick,bigger,color=black!25]
		(titleOut) to[out=20,in=260] (plotIn);

\end{tikzpicture}

\newpage

%----------------------------  Table of Contents -----------------------------------------------------------

\pagenumbering{roman}

\maketitle
\tableofcontents

\newpage


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Documentation starts here.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\pagenumbering{arabic}

% A friendly reminder that this package is currently unstable.
\tikzDocDisclaim{Caveat Utilitor}
{
This is a friendly reminder that the \pkg{tikzDevice} package is currently considered by it's designers to be a {\bfseries beta work}. This package has been released in the hopes that it will help users produce exceptional graphics, leading to an increase in the quality of reports and other materials using those graphics.\\[1em]

However, the package has not been tested in an extensive variety of situations beyond those that have been dreamed up by the designers. Therefore, it is very likely that this package will help produce exceptional crashes, leading to an increase in the quantity of swearing by \lang{R} and users affected by those crashes.\\[1em]

We hope this package will improve with time and attain a level of usability and trustability at which it may be labeled ``stable". Until then the package, including this documentation, may undergo significant changes in form and function. During the beta period the actual implementation of the package may differ significantly from what is described in this documentation.\\[1em]

In fact, the documentation may differ significantly from what is described in the documentation.\\[1em]

Thanks for giving it a try!\\
\quad{\itshape -The tikzDevice Team}
}


\section{Introduction}

The \pkg{tikzDevice} package allows for R graphics output in a native \LaTeX\ format. That is, the output of the \code{tikz()} function is plain-text files that can be interpreted using \TikZ, a package for \LaTeX. These files can be directly included in \LaTeX\ documents by way of the \verb'\input{}' statement. Allowing \LaTeX\ to handle both typesetting and figure composition bestows the resulting document with a clean, unified look as there are no discontinuities in the size and selection of fonts used in the output.

This document is divided into three parts. The first part describes the functions that the package makes available to the \lang{R} user and provides examples of their capabilities. Besides the \lang{R} environment, use of the \TikZ\ device device requires the user to have a working \LaTeX\ compiler along with an installed version of the \TikZ\ package. The second part of this documentation offers suggestions on how to get these tools working properly.

The third part of the documentation is intended for those who are curious as to the details of how this package has been implemented. It attempts to explain how the \TikZ\ package does the things that it does and why it chooses to do them that way. The authors have attempted to write this part of the documentation in a way that is accessible to users as well as developers. This has been done in the hope that this project may serve as a case study in creating an R graphics device. This part of the documentation may also help those considering undertaking the transition from casual package-building to full-on hacking of the \lang{R} internals.


\part{Usage and Examples}
\label{part:one}


%----------------------------  Package Loading -----------------------------------------------------------

\section{Loading the Package}

The functions in the \pkg{tikzDevice} package are made accessible in the \lang{R} environment by using either the \code{library()} or \code{require()} functions like so:

\begin{Verbatim}[frame=single]
require(tikzDevice)
\end{Verbatim}

Upon loading, the package will search for a usable \LaTeX\ compiler. Access to \LaTeX\ is essential for the device to produce correct output as the compiler is queried for font metrics several times during device output. For more information on why communication between the device and \LaTeX\ is necessary, see \autoref{part:three}. If the search for a compiler is successful the package startup message should look similar to the following:

\begin{Verbatim}[frame=single]
filehash: Simple key-value database (2.0-1 2008-12-19)
tikzDevice: A Device for R Graphics Output in PGF/TikZ Format (v0.3.5)
Checking for a LaTeX compiler...

pdfTeX 3.1415926-1.40.9-2.2 (Web2C 7.5.7)
kpathsea version 3.5.7
...

A working LaTeX compiler was found in:
	The R environment variable R_LATEXCMD

Global option tikzLatex set to:
	/usr/texbin/latex
\end{Verbatim}

If a working \LaTeX\ compiler cannot be found, the \pkg{tikzDevice} package will fail to load and a warning message will be displayed:

\begin{Verbatim}[frame=single]
An appropriate LaTeX compiler could not be found.
Access to LaTeX is currently required in order for the
TikZ device to produce output.

The following places were tested for a valid LaTeX compiler:

	A pre-existing value of the global option tikzLatex
	The R environment variable R_LATEXCMD
	The R environment variable R_PDFLATEXCMD
	The global option latexcmd
	The PATH using the command latex
	The PATH using the command pdflatex
...

Error : .onLoad failed in 'loadNamespace' for 'tikzDevice'
Error: package/namespace load failed for 'tikzDevice'
\end{Verbatim}

In this case, \pkg{tikzDevice} has done it's very best to locate a working compiler and came up empty. If you have a working \LaTeX\ compiler, the next section describes how to inform the \pkg{tikzDevice} package of its location. For suggestions on how to obtain a \LaTeX\ compiler, see \autoref{part:two}.


\subsection{\lang{R} Options That Affect Package Behavior}
The \pkg{tikzDevice} package is currently influenced by two global options that may be set in a \code{.Rprofile} file. The first is called \code{tikzLatex} and specifies the location of the \LaTeX\ compiler to be used by \pkg{tikzDevice}. Setting this option may help the package locate a missing compiler. This option may be set in \code{.Rprofile} as follows:

\begin{Verbatim}[frame=single]
options( tikzLatex = '/path/to/latex/compiler' )
\end{Verbatim}


The second, and perhaps most important, global options that affects \pkg{tikzDevice} is the option \code{tikzMetricsDictionary}. When using the graphics device provided by \pkg{tikzDevice}, you may notice that \lang{R} appears to ``lag" or ``hang" when commands such as \code{plot()} are executed. This is because the device must query the \LaTeX\ compiler for string widths and font metrics. For a normal plot, this may happen dozens or hundreds of times- hence \lang{R} becomes unresponsive for a while. The good news is that the \code{tikz()} code is designed to cache the results of these computations so they need only be performed once for each string or character. By default, these values are stored in a temporary cache file which is deleted when \lang{R} is shut down. A location for a permanent cache file may be specified by setting the value of \code{tikzMetricsDictionary} in \code{.Rprofile}:

\begin{Verbatim}[frame=single]
options( tikzMetricsDictionary = '/path/to/dictionary/location' )
\end{Verbatim}

The proper placement of a \code{.Rprofile} file is explained in \code{?Startup}. For the details of why calling the \LaTeX\ compiler is necessary, see \autoref{part:three}.


\label{cache:user}

%----------------------------  tikz() function documentation -------------------------------------------------

\section{The \code{tikz()} Function}

\subsection{Description}
The \code{tikz()} function provides most of the functionality of the \pkg{tikzDevice} package. This function is responsible for creating new \lang{R} graphics devices that translate the output of graphics functions to the \TikZ\ format. The device supports many levels of output that range from stand-alone \LaTeX\ documents that may be compiled directly to code chunks that must be incorporated into existing \LaTeX\ documents using the \verb`\include{}` function.

\subsection{Usage}

The \code{tikz()} function opens a new graphics device and may be called with the following arguments:

\begin{Verbatim}[frame=single]
tikz(file = "Rplots.tex", width = 7, height = 7, 
	bg="white", fg="black", standAlone = FALSE, bareBones = FALSE )
\end{Verbatim}

\begin{description}
\item[\code{file}]{ A character string indicating the desired path to the output file. It is recommended, but not required, that the filename end in \code{.tex}.}
\item[\code{width}]{ The width of the output figure, in {\bfseries inches}. }
\item[\code{height}]{ The height of the output figure, in {\bfseries inches}. }
\item[\code{bg}]{ The starting background color for the plot. }
\item[\code{fg}]{ The starting foreground color for the plot. }
\item[\code{standAlone}]{ A logical value indicating whether the resulting file should be suitable for direct processing by \LaTeX .}
\item[\code{bareBones}]{ A logical value indicating whether the resulting \TikZ code produced without being placed within a \LaTeX\ \code{tikzpicture} envirement.}
\end{description}

The first five options should be familiar to anyone who has used the default graphics devices shipped with \lang{R}. The options \code{file}, \code{width}, \code{height}, \code{bg} and \code{fg} represent the standard graphics parameters currently implemented by \pkg{tikzDevice}. The last two options, \code{standAlone} and \code{bareBones}, are specific to the \code{tikz()} graphics device and affect the structure the output file. Using these options \code{tikz()} supports three modes of output: 

\begin{itemize}

	\item{Graphics production as complete \LaTeX\ files suitable for compilation.}
	
	\item{Graphics production as complete figures suitable for inclusion in \LaTeX\ files.}
	
	\item{Graphics production as raw figure code suitable for inclusion in an enclosing \code{tikzpicture} environment in a \LaTeX\ file.}

\end{itemize}

The next section provides examples of how to use each type of output.

\subsection{Examples}

% We will shift into the figs directory here so that we don't have
% to have separate Sweave code chunks with the 'figs/' path in
% them.
<<pathStepIn,results=hide>>=
	setwd('figs')
@
\subsubsection{Default Mode}

The most common use of the \code{tikz()} function is to produce a plot that will be included in another \LaTeX\ document, such as a report. Running the following example in lang{R} will produce a very simple graphic using the \code{plot()} function.

<<simpleEx,echo=T,results=hide>>=
require(tikzDevice)
tikz('simpleEx.tex',width=3.5,height=3.5)
plot(1,main='Hello World!')
dev.off()
@

A simple \LaTeX\ document is then required to display the output of the basic \code{tikz()} command. This document must include the \TikZ\ as one of the packages that it loads. The \TikZ\ package provides several optional libraries that provide additional functionality, however none of these libraries are currently required to use the output of \code{tikz()}. Inside the \LaTeX\ document, the contents of the file \lang{simpleEx.tex} are imported using the \verb`\include{}` command.

\begin{figure}[H]
	\centering

	\begin{minipage}{0.5\textwidth}

\begin{tikzDocExample}[title={Example \LaTeX\ Document}]
\documentclass{article}

% All LaTeX documents including 
% tikz() output must use this 
% package!
\usepackage{tikz}

\begin{document}
  \begin{figure}[!h]
    \centering
        
    % The output from tikz()
    % is imported here.
    \input{simpleEx.tex}
        
    \caption{Simple Example}
  \end{figure}
\end{document}
\end{tikzDocExample}

	\end{minipage}
	\hfill
	\begin{minipage}{0.45\textwidth}
		\input{figs/simpleEx.tex}
	\end{minipage}
	\caption{Example of simple \code{tikz()} usage.}
\end{figure}

One of the most exciting aspects of the \code{tikz()} function is that it allows the inclusion of arbitrary \LaTeX\ code in plotting commands. An important issue to note is that many \LaTeX\ commands pare prefixed by the backaslash, \textbackslash, character. This character has a special meaning as an escape charcter in many computing applications, including \lang{R}. Therefore, it is necessary to place two backslashes, \textbackslash\textbackslash, in the input to \lang{R} commands in order to cause one to appear in the output.  The next example demonstrates how to use \LaTeX\ commands in plot annotation.

\begin{figure}[H]
	\centering

	\begin{minipage}{0.5\textwidth}

<<latexEx,echo=T,results=hide,keep.source=T>>=
require(tikzDevice)
tikz('latexEx.tex',
  width=3.5,height=3.5)

x <- rnorm(5)
y <- x + rnorm(5,sd=0.25)

model <- lm(y ~ x)
rsq <- summary( model )$r.squared
rsq <- signif(rsq,4)

plot(x,y,main='Hello \\LaTeX!')
abline(model,col='red')

mtext(paste("Linear model: $R^{2}=",
  rsq,"$" ),line=0.5)

dev.off()
@
	\end{minipage}
	\hfill
	\begin{minipage}{0.45\textwidth}
		\input{figs/latexEx.tex}
	\end{minipage}
	\caption{A more complicated example of \code{tikz()} usage incorporating natively rendered \LaTeX\ commands.}
\end{figure}

\subsubsection{\code{bareBones} Mode}

The\code{barBones} is designed to facilitate inclusion of \code{tikz()} output as part of a larger graphic. Normally \code{tikz()} packages the commands it produces as a self-contained figure. This is done by placing the \verb`\begin{tikzpicture}` and \verb`\end{tikzpicture}` commands at the beginning and end of the output file. When \code{bareBones} is invoked, the \code{tikzpicture} environment is omitted which allows the output to be embedded inside a \code{tikzpicture} of the users own construction.

<<bareBonesExample,echo=T,results=hide,keep.source=T>>=
require(tikzDevice)
tikz('bareBonesExample.tex',width=4,height=4,bareBones=T)

x <- c(0,cumsum(rnorm(25)))
y <- c(0,cumsum(rnorm(25)))

plot(x, y, type="l" )

title("A Brownian Motion")

dev.off()
@

The resulting code may then be used inside a \code{tikzpicture} environment using the \verb`\include{}` command. The included code must be wrapped in a \code{scope} environment that contains the options \code{x=1pt} and \code{y=1pt}. This informs \TikZ\ of the units being used in the coordinates of the plot output. The options \code{xshift} and \code{yshift} may also be applied to the \code{scope} in order to position the plot. The following code demonstrates how to embed \code{bareBones} output in a \code{tikzpicture}

\begin{tikzDocExample}[title={
	Example of a \TikZ\ environment with included \code{bareBones} output},
	footer={this is the footer.}
]
\begin{tikzpicture}

  \draw[clip] (-0.25,-0.25) rectangle (4.25in,4.25in);

  \begin{scope}[x=1pt,y=1pt,yshift=0.25in]
    \input{figs/bareBonesExample}
  \end{scope}

  \node[anchor=south west,draw,rounded corners] (start) at (0,0) 
    {TikZ can draw Brownian Motions as Well!};

  \coordinate (current point) at (start.east);
  \coordinate (old velocity) at (0,-5);
  \coordinate (new velocity) at (rand,rand);

  \foreach \i in {25,26,...,50} {

    \draw[blue!\i,ultra thick,line cap=round,x=1cm,y=1cm]
      (current point) .. controls ++([scale=-1]old velocity)
        and ++(new velocity) ..
      ++(rand, rand) coordinate(current point);
	
    \coordinate(old velocity) at (new velocity);
    \coordinate(new velocity) at (rand,rand);	
    
  }
	
\end{tikzpicture}
\end{tikzDocExample}



\begin{figure}[H]
	
	\centering
	
	\begin{tikzpicture}

		\draw[clip] (-0.25,-0.25) rectangle (4.25in,4.25in);

		\begin{scope}[x=1pt,y=1pt,yshift=0.25in]
			\input{figs/bareBonesExample}
		\end{scope}
		
		\node[anchor=south west,draw,rounded corners] (start) at (0,0) 
			{TikZ can draw Brownian Motions as Well!};
		
		\coordinate (current point) at (start.east);
		\coordinate (old velocity) at (0,-5);
		\coordinate (new velocity) at (rand,rand);
		
		\foreach \i in {25,26,...,50} {

			\draw[blue!\i,ultra thick,line cap=round,x=1cm,y=1cm]
				(current point) .. controls ++([scale=-1]old velocity)
					and ++(new velocity) ..
				++(rand, rand) coordinate(current point);
			
			\coordinate(old velocity) at (new velocity);
			\coordinate(new velocity) at (rand,rand);	
		}
		

		
	\end{tikzpicture}

	\caption{A \TikZ\ drawing with embedded output from \code{tikz(bareBones=T)}.}
\end{figure}

\subsubsection{\code{standAlone} Mode}

When the \code{standAlone} option is passed to \code{tikz()}, the resulting \code{.tex} file will be a complete \LaTeX document designed to be compiled on it's own. This means that in addition to \verb`\begin{tikzpicture}` and \verb`\end{tikzpicture}` the file will also contain \verb`\begin{document}`, \verb`\end{document}` and a \LaTeX\ preamble. The \code{preview} package is also used in files produced by \code{standAlone} and is used to crop the pages in the resulting document to the bounding boxes of the figures that it contains. Stand-alone output may be produced in the following manner:

<<standAloneExample,echo=T,results=hide,keep.source=T>>=
require(tikzDevice)
tikz('standAloneExample.tex',standAlone=T)
plot(sin,-pi,2*pi,main="A Stand Alone TikZ Plot")
dev.off()
@


<<standAloneCompileExample, results=hide>>=

	require(tools)
	
	catch <- system(paste(Sys.which('pdflatex'),
		'-interaction=batchmode -output-directory figs/ figs/standAloneExample.tex'),
		ignore.stderr=T)
	
	# If compiling the example failed, we don't want to include a broken link.	
	if( catch == 0 ){
		pdfLink <- "The file \\\\code{standAloneExample.tex} may then be compiled to produce
			\\\\href{./figs/standAloneExample.pdf}{standAloneExample.pdf}. "
	}else{
		pdfLink <- ""
	}

@

\Sexpr{print(pdfLink)}Note that files produced using the \code{standAlone} option should not be included in \LaTeX documents using the \verb`\input{}` command! Use \verb`\includegraphics{}` or load the \code{pdfpages} package and use \verb`\includepdf{}`.

% Return to the normal working directory
<<pathStepOut,results=hide>>=
	setwd('../')
@

%----------------------------  text metrics function documentation ---------------------------------------

\section{The \code{getLatexCharMetrics()} and \code{getLatexStrWidth()} Functions}

\subsection{Description}

These two functions may be used to retrieve font metrics through the interface provided by the \pkg{tikzDevice} package. Cached values of the metrics are returned if they have been calculated by the \pkg{tikzDevice} before. If no cached values exist, the \LaTeX\ compiler will be invoked to generate them.

\subsection{Usage}

The font metric functions are called as follows:

\begin{Verbatim}[frame=single]
getLatexStrWidth( texString, cex = 1, face= 1)

getLatexCharMetrics( charCode, cex = 1, face = 1 )
\end{Verbatim}

\begin{description}
\item[\code{texString}]{ A string for which to compute the width. \LaTeX\ commands may be used in the string, however all backslashes will need to be doubled.}
\item[\code{charCode}]{ An integer between 32 and 126 which indicates a printable character in the ASCII symbol table using the T1 font encoding. }
\item[\code{cex}]{ The character expansion factor to be used when determining metrics. }
\item[\code{face}]{ An integer specifying the \lang{R} font face to use during metric calculations. The accepted values are as follows: 
	\begin{description}
		\item[1:]{Text should be set in normal font face.}
		\item[2:]{Text should be set in {\bfseries bold font face}.}
		\item[3:]{Text should be set in {\itshape italic font face}.}
		\item[4:]{Text should be set in {\bfseries\itshape bold italic font face}.}
		\item[5:]{Text should be interpreted as \code{plotmath} symbol characters. Requests for font face 5 are currently ignored.}
	\end{description}
	}
\end{description}

\subsection{Examples}

The \code{getLatexStrWidth()} function may be used to calculate the width of strings containing fairly arbitrary \LaTeX\ commands. For example, consider the following calculations:


<<strWidthDemo,echo=T>>=
getLatexStrWidth( "The symbol: alpha" )
getLatexStrWidth( "The symbol: $\\alpha$" )
@

For the first calculation, the word ``alpha" was interpreted as just a word and the widths of the characters `a', `l', `p', `h' and `a' were included in the string width. For the second string, \verb`\alpha` was interpreted as a mathematical symbol and only the width of the symbol `$\alpha$' was included in the string width.

The \code{getLatexCharWidth()} function must be passed an integer corresponding to an ASCII character code and returns three values:

	\begin{itemize}
		
		\item{The \code{ascent} of the character- the distance between the baseline and the highest point of the character's glyph.}
		
		\item{The \code{descent} of the character- the distance between the baseline and the lowest point of the character's glyph.}
		
		\item{The width of the character.}

	\end{itemize}
	
The character `y' has an \code{ASCII} symbol code of 121 and possesses a tail that descends below the text line. Therefore a non-zero value will be returned for the descent of `y'. The character `x', \code{ASCII} code 120, has no descenders, so its descent will be returned as zero.

<<charMetricDemo,echo=T,keep.source=T>>=
# Get metrics for 'y'
getLatexCharMetrics(121)

# Get metrics for 'x' - the second value is the descent
# and should be zero or very close to zero.
getLatexCharMetrics(120)
@

Note that characters, along with numbers outside the range of [32-126], may not be passed to the \nolinebreak\code{getLatexCharMetrics()}  function. If for some reason a floating point number is passed, it will be floored through conversion by \code{as.integer()}.

<<charMetricErrors,echo=T,keep.source=T>>=
getLatexCharMetrics('y')
getLatexCharMetrics(20)

# Will return metrics for 'y'
getLatexCharMetrics(121.99)
@


\newpage
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\part{Installation Guide}
\label{part:two}

\section{Installing \LaTeX}

\section{Installing \TikZ}

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\part{Package Internals}
\label{part:three}

\section{Background}
About \TikZ{}, the Pic\TeX{} device and the story of two fortran programmers with a dream.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{System Requirements}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Character Metrics and String Width}

\subsection{Dictionaries}
\subsection{What the Heck are Acent, Decent and Width}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{On the Importance of Font and Style Consistancy in Reports}

\section{The \pkg{pgfSweave} Package and Automatic Report Generation}
	
\end{document}
